%define name @package_name
# We mangled the package name (added -full),
# but the source tarball contains a directory without the -full
%define unmangled_name @name
%define unmangled_version @version
%define docs @name-@version.docs
# Mangling is replacing "-" by "_"
%define version @package_version
%define release @release
%define license @license

# Add --soname-only. We don't really want that, but otherwise binary python wheels generate requires without corresponding provides
%define __elf_requires	%{_rpmconfigdir}/elfdeps --requires --soname-only %{?__filter_GLIBC_PRIVATE:--filter-private}

# We don't want to deal with shebang unmangling for now
# (needed in rh9 since unmangle failure is now an error instead of a warning)
%undefine __brp_mangle_shebangs

Summary: @description
Name: %{name}
Version: %{version}
Release: %{release}
Source0: @source
License: %{license}
Group: @group
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot
Prefix: %{_prefix}
BuildArch: @architecture
Vendor: @vendor
Packager: @packager
Requires: @requires
BuildRequires: @build_requires
Url: @URL

%description
@long_description

%prep
%setup -n %{unmangled_name}-%{unmangled_version}

%build
@build_environment
@python_shell -m venv venv
venv/bin/python3 -m pip install --upgrade pip
venv/bin/python3 -m pip install --upgrade setuptools
# venv/bin/python3 -m pip list
# install does not replace - with _ if pyproject.toml exists
# touch pyproject.toml
@pre_pip_install
venv/bin/python3 -m pip install .
@post_pip_install

rm -rf venv/docs
# venv/bin/python3 -m pip list
# venv/bin/python3 -m pip uninstall -y setuptools

# extra cat to ignore exitcode of grep
venv/bin/python3 -m pip freeze | grep -v " @@ file:/" | cat > venv/requirements.txt

# remove all pycaches
find venv -name __pycache__ -type d -prune -exec rm -rf {} +
# seek pyo file and pyc files to delete them
find venv -name '*.py[co]' -delete
# Notice that FILES_TO_INSTALL will contain . which needs to be skipped
# Also skip paths with space in the name
(cd venv && find -name "* *" -prune -o -type f -print -o -type l -print) > FILES_TO_INSTALL

# Get development packages
venv/bin/python3 -m pip install .[dev]

if test -e docs; then
  # Remove email address (sphinx processing has problems with that)
  vendor=`echo '@vendor' | sed -e 's/ *<.*//'`
  (. venv/bin/activate && cd docs && SPHINXOPTS="-D author='' -D copyright='$vendor'" make html info)
  # rm -rf docs/build/.doctrees

  ln -sf build/html docs/%{docs}
  (cd docs && zip -r ../venv/docs.zip %{docs})
  echo "./docs.zip" >> FILES_TO_INSTALL

  cp -a docs/build/texinfo/%{unmangled_name}.info venv/
  gzip venv/%{unmangled_name}.info
  echo "./%{unmangled_name}.info.gz" >> FILES_TO_INSTALL

  rm docs/%{docs}
fi

%install
# Create directories
install -d -m 0755 "$RPM_BUILD_ROOT"@target_quoted "$RPM_BUILD_ROOT/usr/local/bin"
if test -e docs; then
    install -d -m 0755 "$RPM_BUILD_ROOT"@target_quoted "$RPM_BUILD_ROOT/usr/local/share/info"
fi

echo @target_quoted > INSTALLED_FILES

INSTALL_TARGET=@target_quoted
if test "$INSTALL_TARGET" = /usr/local; then
    install -d -m 0755 "$RPM_BUILD_ROOT"@target_quoted/etc
    cp -r venv/etc "$RPM_BUILD_ROOT"@target_quoted/
    # Put scripts in /usr/local/bin
    for script in @scripts_shell; do
        cp -r venv/"$script" "$RPM_BUILD_ROOT/usr/local/bin/"
    done
    if test -e docs; then
        cp -ar "venv/%{unmangled_name}.info.gz" "$RPM_BUILD_ROOT/usr/local/share/info/"
    fi
else
    # Copy the whole of venv
    (cd venv && tar -T ../FILES_TO_INSTALL -cpf-) | (cd "$RPM_BUILD_ROOT"@target_quoted/ && tar -xpf-)
    # Put symbolic links to scripts in /usr/local/bin
    for script in @scripts_shell; do
        ln -s @target_quoted/"$script" "$RPM_BUILD_ROOT/usr/local/bin/"
        base=`basename "$script"`
        echo "/usr/local/bin/$base" >> INSTALLED_FILES
    done
    if test -e docs; then
        ln -s @target_quoted/"%{unmangled_name}.info.gz" "$RPM_BUILD_ROOT/usr/local/share/info/"
        echo "/usr/local/share/info/%{unmangled_name}.info.gz" >> INSTALLED_FILES
    fi
fi

# Update #! lines that refer to something in venv
FROM_PATH=`realpath venv`/bin/python3
if test @executable_quoted; then
    TO_PATH=@executable_quoted
else
    TO_PATH="$INSTALL_TARGET/bin/python3"
fi
grep -Irl -- "^#! *$TMP" "$RPM_BUILD_ROOT"@target_quoted | @python_shell -c '
import fileinput
import sys
import re
for line in fileinput.input(sys.stdin.read().splitlines(), inplace=True): sys.stdout.write(re.sub(r"(\bPACKAGE_VERSION\s*=\s*)([\x27\x22])[^\x27\x22\\]+\2", fr"\g<1>\g<2>{sys.argv[3]}\g<2>", line).replace(sys.argv[1], sys.argv[2]))
' "$FROM_PATH" "$TO_PATH" '%{version}'

%check
PATH=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/sbin:/usr/local/bin
venv/bin/python3 -m pip install .[dev]
if test @safety_quoted; then
    venv/bin/python3 -m @safety_quoted check
fi
if test @executable_quoted; then
    PYTHON=@executable_quoted
else
    PYTHON=venv/bin/python3
fi
for script in @scripts_shell; do
    if sed -n '/[\/ ]python3\?$/q;q1' "$script"; then
        "$PYTHON" "$script" --version > /dev/null
    fi
done
LIB=""
if test -d lib; then
  LIB=" lib"
fi
TESTS=""
if test -d tests; then
  TESTS=" tests"
fi
if test @mypy_quoted; then
    for script in @scripts_shell; do
        venv/bin/python3 -m mypy "$script"$LIB$TESTS
    done
fi
if test @safety_quoted; then
    # autoflake needs setuptools
    venv/bin/python3 -m pip install setuptools types-setuptools
    venv/bin/python3 -m autoflake -r --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys @scripts_shell$LIB$TESTS
fi
if test @pytest_quoted; then
    venv/bin/python3 -m pytest -x
fi

%clean
rm -rf -- "$RPM_BUILD_ROOT"

%post
PATH=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/sbin:/usr/local/bin
if test @target_quoted != /usr/local; then
    # Generate __pycache__
    find @target_quoted -name __pycache__ -type d -prune -exec rm -rf {} +
    find @target_quoted -name '*.py[co]' -delete
    for script in @scripts_shell; do
        if sed -n '/[\/ ]python3\?$/q;q1' @target_quoted/"$script"; then
            @target_quoted/"$script" --version > /dev/null
        fi
    done
fi

%preun
# remove all __pycache__
find @target_quoted -name __pycache__ -type d -prune -exec rm -rf {} +
# seek pyo file and pyc file to delete it
find @target_quoted -name '*.py[co]' -delete

%files -f INSTALLED_FILES
%defattr(-,root,root)
