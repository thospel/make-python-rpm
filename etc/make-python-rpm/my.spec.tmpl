%define name @package_name
# We mangled the package name (added -full),
# but the source tarball contains a directory without the -full
%define unmangled_name @name
%define unmangled_version @version
# Mangling is replacing "-" by "_"
%define version @package_version
%define release @release
%define license @license

# Add --soname-only. We don't really want that, but otherwise binary python wheels generate requires without corresponding provides
%define __elf_requires	%{_rpmconfigdir}/elfdeps --requires --soname-only %{?__filter_GLIBC_PRIVATE:--filter-private}


Summary: @description
Name: %{name}
Version: %{version}
Release: %{release}
Source0: @source
License: %{license}
Group: @group
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot
Prefix: %{_prefix}
BuildArch: @architecture
Vendor: @vendor
Packager: @packager
# Requires: @requires
BuildRequires: @requires
Url: @URL

%description
@long_description

%prep
%setup -n %{unmangled_name}-%{unmangled_version}

%build
@python_shell -m venv venv
venv/bin/python3 -m pip install --upgrade pip
# venv/bin/python3 -m pip install --upgrade setuptools
# venv/bin/python3 -m pip list

# editable install does not replace - with _ if pyproject.toml exists
# touch pyproject.toml
venv/bin/python3 -m pip install .
test -e venv/etc/make_python_rpm && mv venv/etc/make_python_rpm venv/etc/make-python-rpm

rm -rf venv/docs
# venv/bin/python3 -m pip list
# venv/bin/python3 -m pip uninstall -y setuptools
# remove all pycaches
venv/bin/python3 -m pip freeze > venv/requirements.txt
find venv -name __pycache__ -type d -prune -exec rm -rf {} +
# seek pyo file and pyc file to delete it
find venv -name '*.py[co]' -delete

%install
# Create directories
install -d -m 0755 "$RPM_BUILD_ROOT"@target_quoted/bin

echo @target_quoted > INSTALLED_FILES

INSTALL_TARGET=@target_quoted
if test "$INSTALL_TARGET" = /usr/local; then
    install -d -m 0755 "$RPM_BUILD_ROOT"@target_quoted/etc
    cp -r venv/etc "$RPM_BUILD_ROOT"@target_quoted/
    # Put scripts in /usr/local/bin
    for script in @scripts_shell; do
        cp -r venv/"$script" "$RPM_BUILD_ROOT/usr/local/bin/"
    done
else
    # Copy the whole of venv
    (cd venv && tar -T ../FILES_TO_INSTALL -cpf-) | (cd "$RPM_BUILD_ROOT"@target_quoted/ && tar -xpf-)
    # Put symbolic links to scripts in /usr/local/bin
    for script in @scripts_shell; do
        ln -s @target_quoted/"$script" "$RPM_BUILD_ROOT/usr/local/bin/"
        base=`basename "$script"`
        echo "/usr/local/bin/$base" >> INSTALLED_FILES
    done
fi

# Update #! lines that refer to something in venv
FROM_PATH=`realpath venv`/bin/python3
if test @executable_quoted; then
    TO_PATH=@executable_quoted
else
    TO_PATH="$INSTALL_TARGET/bin/python3"
fi
grep -Irl -- "^#! *$TMP" "$RPM_BUILD_ROOT"@target_quoted | @python_shell -c '
import fileinput
import sys
import re
for line in fileinput.input(sys.stdin.read().splitlines(), inplace=True): sys.stdout.write(re.sub(r"(\bPACKAGE_VERSION\s*=\s*)([\x27\x22])[^\x27\x22\\]+\2", fr"\g<1>\g<2>{sys.argv[3]}\g<2>", line).replace(sys.argv[1], sys.argv[2]))
' "$FROM_PATH" "$TO_PATH" '%{version}'

%check
# autoflake needs setuptools
venv/bin/python3 -m pip install setuptools
venv/bin/python3 -m pip install safety mypy autoflake types-setuptools
venv/bin/python3 -m safety check
LIB=""
if test -d lib; then
  LIB=" lib"
fi
venv/bin/python3 -m mypy @scripts_shell$LIB
venv/bin/python3 -m autoflake -r --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys @scripts_shell$LIB
if test @executable_quoted; then
    PYTHON=@executable_quoted
else
    PYTHON=venv/bin/python3
fi
for script in @scripts_shell; do
   # "$PYTHON" "$script" --version > /dev/null
   venv/bin/python3 "$script" --version > /dev/null
done

%clean
rm -rf -- "$RPM_BUILD_ROOT"

%files -f INSTALLED_FILES
%defattr(-,root,root)
