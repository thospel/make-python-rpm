%define name @package_name
# We mangled the package name (added -full),
# but the source tarball contains a directory without the -full
%define unmangled_name @name
%define unmangled_version @version
# Mangling is replacing "-" by "_"
%define version @package_version
%define release @release
%define license @license

# Add --soname-only. We don't really want that, but otherwise binary python wheels generate requires without corresponding provides
%define __elf_requires	%{_rpmconfigdir}/elfdeps --requires --soname-only %{?__filter_GLIBC_PRIVATE:--filter-private}


Summary: @description
Name: %{name}
Version: %{version}
Release: %{release}
Source0: @source
License: %{license}
Group: @group
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot
Prefix: %{_prefix}
BuildArch: @architecture
Vendor: @vendor
Packager: @packager
# Requires: @requires
BuildRequires: @requires
Url: @URL

%description
@long_description

%prep
%setup -n %{unmangled_name}-%{unmangled_version}

%build
@python_shell -m venv venv
venv/bin/python3 -m pip install --upgrade pip
# venv/bin/python3 -m pip install --upgrade setuptools
# venv/bin/python3 -m pip list

# editable install does not replace - with _ if pyproject.toml exists
# touch pyproject.toml
venv/bin/python3 -m pip install .
test -e venv/etc/make_python_rpm && mv venv/etc/make_python_rpm venv/etc/make-python-rpm

rm -rf venv/docs
# venv/bin/python3 -m pip list
# venv/bin/python3 -m pip uninstall -y setuptools
# remove all pycaches
venv/bin/python3 -m pip freeze > venv/requirements.txt
find venv -name __pycache__ -type d -prune -exec rm -rf {} +
# seek pyo file and pyc file to delete it
find venv -name '*.py[co]' -delete

%install
# Create directories
install -d -m 0755 "$RPM_BUILD_ROOT"@target_quoted/bin
install -d -m 0755 "$RPM_BUILD_ROOT"@target_quoted/etc

cp -r venv/etc "$RPM_BUILD_ROOT"@target_quoted/
cp -r venv/bin/make-python-rpm "$RPM_BUILD_ROOT"@target_quoted/bin/
TMP=`realpath venv`/bin/
INSTALL_TARGET="/usr/bin/env "
grep -Irl -- "^#! *$TMP" "$RPM_BUILD_ROOT"@target_quoted | @python_shell -c '
import fileinput
import sys
import re
for line in fileinput.input(sys.stdin.read().splitlines(), inplace=True): sys.stdout.write(re.sub(r"(%%\(prog\)s\s+)[^\x27\x22]+", r"\g<1>" + sys.argv[3], line).replace(sys.argv[1], sys.argv[2]))
' "$TMP" "$INSTALL_TARGET" '%{version}'

echo @target_quoted > INSTALLED_FILES

%check
# autoflake needs setuptools
venv/bin/python3 -m pip install setuptools
venv/bin/python3 -m pip install safety mypy autoflake types-setuptools
venv/bin/python3 -m safety check
venv/bin/python3 -m mypy @scripts_shell
venv/bin/python3 -m autoflake -r --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys @scripts_shell
for script in @scripts_shell; do
   venv/bin/python3 "$script" --version > /dev/null
done

%clean
rm -rf -- "$RPM_BUILD_ROOT"

%files -f INSTALLED_FILES
%defattr(-,root,root)
